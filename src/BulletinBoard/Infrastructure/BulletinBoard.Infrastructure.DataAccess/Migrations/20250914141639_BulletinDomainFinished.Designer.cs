// <auto-generated />
using System;
using BulletinBoard.Infrastructure.DataAccess.Contexts.Bulletin;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BulletinBoard.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(BulletinContext))]
    [Migration("20250914141639_BulletinDomainFinished")]
    partial class BulletinDomainFinished
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsLeafy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId")
                        .HasDatabaseName("IX_BulletinCategory_ParentCategoryId");

                    b.HasIndex("ParentCategoryId", "CategoryName")
                        .IsUnique()
                        .HasDatabaseName("IX_BulletinCategory_ParentId_Name");

                    b.ToTable("BulletinCategory", "public");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_BulletinCharacteristic_CategoryId");

                    b.HasIndex("CategoryId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_BulletinCharacteristic_CategoryId_Name");

                    b.ToTable("BulletinCharacteristic", "public");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinCharacteristicValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacteristicId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicId")
                        .HasDatabaseName("IX_BulletinCharacteristicValue_CharacteristicId");

                    b.HasIndex("CharacteristicId", "Value")
                        .IsUnique()
                        .HasDatabaseName("IX_BulletinCharacteristicValue_CharacteristicId_Value");

                    b.ToTable("BulletinCharacteristicValue", "public");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinCharacteristicСomparison", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BulletinId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacteristicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacteristicValueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BulletinId")
                        .HasDatabaseName("IX_BulletinCharacteristicСomparison_BulletinId");

                    b.HasIndex("CharacteristicId")
                        .HasDatabaseName("IX_BulletinCharacteristicСomparison_CharacteristicId");

                    b.HasIndex("CharacteristicValueId")
                        .HasDatabaseName("IX_BulletinCharacteristicСomparison_CharacteristicValueId");

                    b.HasIndex("BulletinId", "CharacteristicId")
                        .IsUnique()
                        .HasDatabaseName("IX_BulletinCharacteristicСomparison_BulletinId_CharacteristicId");

                    b.ToTable("BulletinCharacteristicСomparison", "public");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BulletinId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BulletinId")
                        .HasDatabaseName("IX_BulletinImage_BelletinId");

                    b.ToTable("BulletinImage", "public");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinMain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Blocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Closed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Hidden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_BulletinMain_CategoryId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_BulletinMain_CreatedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_BulletinMain_UserId");

                    b.HasIndex("Hidden", "Closed", "Blocked")
                        .HasDatabaseName("IX_BulletinMain_Visibility");

                    b.ToTable("BulletinMain", "public");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BulletinId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("ViewsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("BulletinId")
                        .IsUnique()
                        .HasDatabaseName("IX_BulletinRating_BulletinId");

                    b.HasIndex("Rating")
                        .HasDatabaseName("IX_BulletinRating_Rating");

                    b.HasIndex("ViewsCount")
                        .HasDatabaseName("IX_BulletinRating_ViewsCount");

                    b.ToTable("BulletinRating", "public");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Blocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("FormattedAddress")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<double>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.HasKey("Id");

                    b.HasIndex("Blocked")
                        .HasDatabaseName("IX_BulletinUser_Blocked");

                    b.HasIndex("Latitude", "Longitude")
                        .HasDatabaseName("IX_BulletinUser_Location");

                    b.ToTable("BulletinUser", "public");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinCategory", b =>
                {
                    b.HasOne("BulletinBoard.Domain.Entities.Bulletin.BulletinCategory", "ParentCategory")
                        .WithMany("ChildrenCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinCharacteristic", b =>
                {
                    b.HasOne("BulletinBoard.Domain.Entities.Bulletin.BulletinCategory", "Category")
                        .WithMany("Characteristics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinCharacteristicValue", b =>
                {
                    b.HasOne("BulletinBoard.Domain.Entities.Bulletin.BulletinCharacteristic", "Characteristic")
                        .WithMany("CharacteristicValues")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Characteristic");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinCharacteristicСomparison", b =>
                {
                    b.HasOne("BulletinBoard.Domain.Entities.Bulletin.BulletinMain", "Bulletin")
                        .WithMany("Characteristics")
                        .HasForeignKey("BulletinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BulletinBoard.Domain.Entities.Bulletin.BulletinCharacteristic", "Characteristic")
                        .WithMany("CharacteristicСomparisons")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BulletinBoard.Domain.Entities.Bulletin.BulletinCharacteristicValue", "CharacteristicValue")
                        .WithMany("CharacteristicСomparisons")
                        .HasForeignKey("CharacteristicValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bulletin");

                    b.Navigation("Characteristic");

                    b.Navigation("CharacteristicValue");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinImage", b =>
                {
                    b.HasOne("BulletinBoard.Domain.Entities.Bulletin.BulletinMain", "Bulletin")
                        .WithMany("Images")
                        .HasForeignKey("BulletinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bulletin");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinMain", b =>
                {
                    b.HasOne("BulletinBoard.Domain.Entities.Bulletin.BulletinCategory", "Category")
                        .WithMany("Bulletins")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BulletinBoard.Domain.Entities.Bulletin.BulletinUser", "User")
                        .WithMany("Bulletins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinRating", b =>
                {
                    b.HasOne("BulletinBoard.Domain.Entities.Bulletin.BulletinMain", "Bulletin")
                        .WithOne("Rating")
                        .HasForeignKey("BulletinBoard.Domain.Entities.Bulletin.BulletinRating", "BulletinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bulletin");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinCategory", b =>
                {
                    b.Navigation("Bulletins");

                    b.Navigation("Characteristics");

                    b.Navigation("ChildrenCategories");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinCharacteristic", b =>
                {
                    b.Navigation("CharacteristicValues");

                    b.Navigation("CharacteristicСomparisons");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinCharacteristicValue", b =>
                {
                    b.Navigation("CharacteristicСomparisons");
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinMain", b =>
                {
                    b.Navigation("Characteristics");

                    b.Navigation("Images");

                    b.Navigation("Rating")
                        .IsRequired();
                });

            modelBuilder.Entity("BulletinBoard.Domain.Entities.Bulletin.BulletinUser", b =>
                {
                    b.Navigation("Bulletins");
                });
#pragma warning restore 612, 618
        }
    }
}
